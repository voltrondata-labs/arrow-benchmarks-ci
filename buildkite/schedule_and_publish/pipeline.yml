steps:
  - label: "Pull Arrow-BCI API Service Docker Image"
    concurrency: 1
    concurrency_group: "arrow-bci-deploy"
    command:
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
      - docker pull ${DOCKER_REGISTRY}/${FLASK_APP}:${BUILDKITE_COMMIT}

  - wait

  - label: "Get Commits"
    concurrency: 1
    concurrency_group: "arrow-bci-deploy"
    command:
      - docker-compose -f envs/prod/docker-compose.yml run app python -c 'from buildkite.schedule_and_publish.get_commits import get_commits; get_commits()'

  - wait

  - label: "Get PyArrow Versions"
    concurrency: 1
    concurrency_group: "arrow-bci-deploy"
    command:
      - docker-compose -f envs/prod/docker-compose.yml run app python -c 'from buildkite.schedule_and_publish.get_pyarrow_versions import get_pyarrow_versions; get_pyarrow_versions()'

  - wait

  - label: "Create Benchmark Builds"
    concurrency: 1
    concurrency_group: "arrow-bci-deploy"
    command:
      - docker-compose -f envs/prod/docker-compose.yml run app python -c 'from buildkite.schedule_and_publish.create_benchmark_builds import create_benchmark_builds; create_benchmark_builds()'

  - wait

  - label: "Update Benchmark Builds Status"
    concurrency: 1
    concurrency_group: "arrow-bci-deploy"
    command:
      - docker-compose -f envs/prod/docker-compose.yml run app python -c 'from buildkite.schedule_and_publish.update_benchmark_builds_status import update_benchmark_builds_status; update_benchmark_builds_status()'

  - wait

  - label: "Run benchalerts pipelines"
    concurrency: 1
    concurrency_group: "arrow-bci-deploy"
    command:
      - docker-compose -f envs/prod/docker-compose.yml run app python -m buildkite.schedule_and_publish.run_benchalerts

  - wait

  - block: "Reschedule Failed Builds"
    prompt: "Select machines that need failed builds rescheduled"
    fields:
      - select: "Machines"
        key: "machines"
        required: true
        multiple: true
        options:
          - label: "arm64-t4g-linux-compute"
            value: "arm64-t4g-linux-compute"
          - label: "ec2-m5-4xlarge-us-east-2"
            value: "ec2-m5-4xlarge-us-east-2"
          - label: "ec2-c6a-4xlarge-us-east-2"
            value: "ec2-c6a-4xlarge-us-east-2"
          - label: "test-mac-arm"
            value: "test-mac-arm"
          - label: "ursa-thinkcentre-m75q"
            value: "ursa-thinkcentre-m75q"
      - text: "Hours"
        key: "hours"
        required: true
        default: "24"

  - label: "Reschedule Failed Builds"
    concurrency: 1
    concurrency_group: "arrow-bci-deploy"
    command: |
      aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
      docker pull ${DOCKER_REGISTRY}/${FLASK_APP}:${BUILDKITE_COMMIT}
      export MACHINES_WITH_FAILED_BUILDS=$(buildkite-agent meta-data get machines)
      export HOURS_WITH_FAILED_BUILDS=$(buildkite-agent meta-data get hours)
      docker-compose -f envs/prod/docker-compose.yml run app python -c 'from buildkite.schedule_and_publish.reschedule_failed_builds import reschedule_failed_builds; reschedule_failed_builds()'
